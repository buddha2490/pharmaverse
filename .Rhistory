devtools::install_version("gt", version = "0.10.1")
devtools::install_github("insightsengineering/cards")
devtools::install_github("ddsjoberg/gtsummary")
?ymd
library(dplyr)
?ydm
??ydm
library(tidyverse)
library(admiral)
install.packages("admiral")
library(admiral)
library(pharmaversesdtm) # Contains example datasets from the CDISC pilot project
library(dplyr)
library(lubridate)
install.packages("pharmaversesdtm")
library(pharmaversesdtm) # Contains example datasets from the CDISC pilot project
data("dm")
data("ds")
data("ex")
data("ae")
data("lb")
head(dm)
?dm
?ds
?ex
# tidyverse example:
foo <- dm
foo <- foo %>%
dplyr::mutate_if(is.character(), tidyr::replace_na(., ""))
foo <- foo %>%
dplyr::mutate_if(is.character() ~ tidyr::replace_na(., ""))
foo <- foo %>%
dplyr::mutate_if(is.character(),  ~ tidyr::replace_na(., ""))
foo <- foo %>%
dplyr::mutate_if(is.character,  ~ tidyr::replace_na(., ""))
dm <- convert_blanks_to_na(dm)
identical(foo, dm)
head(foo)
data("dm") # demography dataset
table(is.nhead(ds))
head(dm)
table(dm$DOMAIN)
data("dm") # demography dataset
data("ds") # disposition dataset
data("ex") # exposure dataset
data("ae") # adverse events dataset
data("lb") # laboratory dataset
head(dm)
head(foo)
dm <- convert_blanks_to_na(dm)
head(dm)
head(foo)
# tidyverse example:
foo <- dm
data("dm") # demography dataset
data("ds") # disposition dataset
data("ex") # exposure dataset
data("ae") # adverse events dataset
data("lb") # laboratory dataset
# tidyverse example:
foo <- dm
foo <- foo %>%
dplyr::mutate_if(is.character,  ~ ifelse(is.na(.), "", .))
head(foo)
head(dm)
foo <- foo %>%
dplyr::mutate_if(is.character,  ~ ifelse(. == "", NA_character_, .))
head(foo)
identical(dm, foo)
data("dm") # demography dataset
# tidyverse example:
foo <- dm
foo <- foo %>%
dplyr::mutate(across(everything),  ~ ifelse(. == "", NA_character_, .))
foo <- foo %>%
dplyr::mutate(across(everything(),  ~ ifelse(. == "", NA_character_, .)))
dm <- convert_blanks_to_na(dm)
identical(foo, dm)
head(foo)
testthat::test_that("", {
testthat::expect_equal(foo, dm, tolerance = 0.001)
})
str(dm)
str(foo)
data("dm") # demography dataset
data("ds") # disposition dataset
data("ex") # exposure dataset
data("ae") # adverse events dataset
data("lb") # laboratory dataset
# tidyverse example:
foo <- dm
foo <- foo %>%
dplyr::mutate(across(everything(),  ~ ifelse(. == "", NA, .)))
dm <- convert_blanks_to_na(dm)
testthat::test_that("", {
testthat::expect_equal(foo, dm, tolerance = 0.001)
})
testthat::test_that("", {
testthat::expect_equal(foo, dm, tolerance = 0.001, check.attributes = FALSE)
})
# Pharmaverse equivalent
dm <- convert_blanks_to_na(dm)
ds <- convert_blanks_to_na(ds)
ex <- convert_blanks_to_na(ex)
ae <- convert_blanks_to_na(ae)
lb <- convert_blanks_to_na(lb)
library(admiral)
names(dm)
table(dm$RACE)
# tidyverse example
foo <- foo %>%
mutate(RACEGR1 = if_else(is.na(RACE), "Missing", if_else(
RACE == "WHITE", "White", "Non-white")))
foo <- foo %>%
mutate(RACEGR2 = case_when(
x == "WHITE" ~ "White",
x != "WHITE" ~ "Non-white",
TRUE ~ "Missing"
))
foo <- foo %>%
mutate(RACEGR2 = case_when(
RACE == "WHITE" ~ "White",
RACE != "WHITE" ~ "Non-white",
TRUE ~ "Missing"
))
table(foo$RACEGR1, foo$RACEGR2)
# custom admiral function
format_race <- function(x) {
iff_else(is.na(RACE), "Missing", if_else(
RACE == "WHITE", "White", "Non-white"))
}
foo <- foo %>%
mutate(RACEGR3 = format_race(RACE))
# custom admiral function
format_race <- function(x) {
iff_else(is.na(RACE), "Missing", if_else(
RACE == "WHITE", "White", "Non-white"))
}
foo <- foo %>%
mutate(RACEGR3 = format_race(RACE))
# custom admiral function
format_race <- function(x) {
iff_else(is.na(x), "Missing", if_else(
x == "WHITE", "White", "Non-white"))
}
# custom admiral function
format_race <- function(x) {
if_else(is.na(x), "Missing", if_else(
x == "WHITE", "White", "Non-white"))
}
foo <- foo %>%
mutate(RACEGR3 = format_race(RACE))
table(foo$RACEGR1, foo$RACEGR3))
table(foo$RACEGR1, foo$RACEGR3)
adae <- readRDS("materials/1-admiral-xportr/data/adae.rds")
meta_variables
# ---- metadata ----
meta_dataset <- read_xlsx("materials/1-admiral-xportr/data/xportr-metadata.xlsx", sheet = "datasets")
meta_variables <- read_xlsx("materials/1-admiral-xportr/data/xportr-metadata.xlsx", sheet = "variables")
library(xportr)
install.packages("xportr")
# ---- metadata ----
meta_dataset <- read_xlsx("materials/1-admiral-xportr/data/xportr-metadata.xlsx", sheet = "datasets")
meta_variables <- read_xlsx("materials/1-admiral-xportr/data/xportr-metadata.xlsx", sheet = "variables")
library(readxl)
library(xportr)
# ---- metadata ----
meta_dataset <- read_xlsx("materials/1-admiral-xportr/data/xportr-metadata.xlsx", sheet = "datasets")
meta_variables <- read_xlsx("materials/1-admiral-xportr/data/xportr-metadata.xlsx", sheet = "variables")
meta_dataset
meta_variables
### ---- attach metadata ----
adsl <- xportr_metadata(adsl, metadata = meta_variables, domain = "ADSL")
# ----- ADSL ----
# pretend we're making adsl with admiral instead of reading it in :)
adsl <- readRDS("materials/1-admiral-xportr/data/adsl.rds")
### ---- attach metadata ----
adsl <- xportr_metadata(adsl, metadata = meta_variables, domain = "ADSL")
attributes(adsl)
str(adsl)
meta_variables
### ---- attach metadata ----
aeae <- xportr_metadata(adae, metadata = meta_variables, domain = "adae")
### ---- attach metadata ----
adae <- xportr_metadata(adae, metadata = meta_variables, domain = "adae")
attributes(adae)
names(adae)
attributes(adsl)
# ----- ADSL ----
# pretend we're making adsl with admiral instead of reading it in :)
adsl <- readRDS("materials/1-admiral-xportr/data/adsl.rds")
### ---- attach metadata ----
adsl <- xportr_metadata(adsl, metadata = meta_variables, domain = "ADSL")
attributes(adsl)
### ---- column order ----
# AGE and TRT01A are in the wrong spot
colnames(adsl)
adsl <- xportr_order(adsl)
colnames(adsl)
### ---- variable types ----
adsl <- xportr_type(adsl)
### ---- variable types ----
adsl <- xportr_type(adsl, verbose = "message")
# check column order
colnames(adae)
attributes(adae)
# check column order
colnames(adae)
meta_dataset
meta_variables
cols(adae)
cols(adae)
colnames(adae)
### ---- column order ----
# AGE and TRT01A are in the wrong spot
colnames(adae)
adsl <- xportr_order(adae)
colnames(adae)
### ---- variable labels
# columns don't have labels
lapply(adsl, \(x) attr(x, 'label'))
### ---- variable labels
# columns don't have labels
lapply(adsl, (x) attr(x, 'label'))
### ---- variable labels
# columns don't have labels
lapply(adsl, \(x) attr(x, 'label'))
adsl <- xportr_label(adsl)
lapply(adsl, \(x) attr(x, 'label'))
### ---- variable length ----
# we didn't specify lengths in the metadata
adsl <- xportr_length(adsl)
lapply(adsl, \(x) attr(x, "width"))
### ---- variable format ----
adsl <- xportr_format(adsl)
lapply(adsl, \(x) attr(x, 'format.sas'))
### ------ write the file ----
xportr_write(adsl, path = "materials/1-admiral-xportr/data/adsl.xpt")
### ---- variable types ----
adsl <- xportr_type(adsl, verbose = "message")
adsl
# custom admiral function
format_race <- function(x) {
case_when(
x == "WHITE" ~ "White",
x != "WHITE" ~ "Non-white",
TRUE ~ "Missing"
)
}
# calling the  function
foo <- foo %>%
mutate(RACEGR3 = format_race(RACE))
?derive_vars_dtm
# Derivations ----
# impute start and end time of exposure to first and last respectively, do not impute date
ex_ext <- ex %>%
derive_vars_dtm(
dtc = EXSTDTC,  # start time
new_vars_prefix = "EXST"
) %>%
derive_vars_dtm(
dtc = EXENDTC, # end time
new_vars_prefix = "EXEN",
time_imputation = "last"
)
names(ex_ext)
head(ex$EXSTDTC)
class(ex$EXSTDTC)
setdiff(names(ex_ext), names(ex))
head(ex_ext[,c("EXSTDTC", "EXENDTC", "EXSTDTM", "EXSTTMF", "EXENDTM", "EXENTMF")]
)
(ex_ext$EXENDTM - ex_ext$EXSTDTM) %>% head()
359 / 24
?dthcaus_source
names(ae)
# Death cause sources
src_ae <- dthcaus_source(
dataset_name = "ae",
filter = AEOUT == "FATAL",
date = convert_dtc_to_dtm(AESTDTC, highest_imputation = "M"),
mode = "first",
dthcaus = AEDECOD,
set_values_to = exprs(DTHDOM = "AE", DTHSEQ = AESEQ)
)
head(src_ae)
class(src_ae)
str(src_ae)
?convert_dtc_to_dtm
head(ae$AEDECOD)
# A. Set up
## Load necessary packages
library(cards)
## Load ADaM ADSL data
adsl <- pharmaverseadam::adsl |> dplyr::filter(SAFFL == "Y")
install.packages("pharmaverseadam")
## Load ADaM ADSL data
adsl <- pharmaverseadam::adsl |> dplyr::filter(SAFFL == "Y")
ard_age_overall <- ard_continuous(
data = adsl,
variables = AGE
)
ard_age_overall
table(ard_age_overall$stat)
table(ard_age_overall$stat_label)
summary(adsl$AGE)
### default
ard_continuous(
data = adsl,
variables = AGE,
statistic = everything() ~ continuous_summary_fns(c("N", "mean", "sd", "median", "p25", "p75", "min", "max"))
)
ard_continuous(
data = adsl,
variables = AGE,
statistic = everything() ~ continuous_summary_funs(c("N", "mean"))
)
ard_continuous(
data = adsl,
variables = AGE,
statistic = everything() ~ continuous_summary_fns(c("N", "mean"))
)
### subset
ard_continuous(
data = adsl,
variables = AGE,
statistic = ~ continuous_summary_fns(c("mean","median"))
)
### custom
tidy_ttest <- function(x){
t.test(x) |> broom::tidy()
}
tidy_ttest(adsl$AGE)
ard_continuous(
data = adsl,
variables = AGE,
statistic = ~ list(tidy_ttest = tidy_ttest)
)
### when things go wrong
error_fun <- function(x){
stop("an error!")
}
ard_continuous(
data = adsl |> dplyr::mutate(AGE2 = AGE),
variables = c(AGE, AGE2),
statistic = ~continuous_summary_fns(other_stats = list(my_stat = error_fun))
) |>
print_ard_conditions()
ard_categorical(
data = adsl,
variables = AGEGR1
)
ard_categorical(
data = adsl,
variables = AGE,
statistic = everything() ~ c("n", "p", "N")
)
?ard_categorical
ard_stack(
data = adsl,
.by = TRT01A,
ard_continuous(variables = AGE),
ard_categorical(variables = AGEGR1),
.overall = TRUE
)
ard_stack(
data = adsl,
.by = TRT01A,
ard_continuous(variables = AGE),
ard_categorical(variables = AGEGR1),
.overall = TRUE,
.total_n = TRUE
)
ard_full3 |> tail()
# Load necessary packages
library(tfrmt)
install.packages("tfrmt", "cardx")
install.packages(c("tfrmt", "cardx"))
# Load necessary packages
library(tfrmt)
library(cards)
library(dplyr)
library(tidyr)
library(cardx)
## Load demog ARD
ard_demog <- readRDS("materials/3-Tables/data/tfrmt_ard_demog.rds")
# Manipulations to prep for display
#  - Perform shuffle to consolidate columns
#  - Fill in any overall summaries with TRT01A = "Overall"
#  - Manipulate label for dichotomous SEX so it includes the level and appears on one line
#  - Add columns to order on
#  - keep only treatment group big N's (not variable-level Ns)
ard_demog <- ard_demog |>
shuffle_ard() |>
replace_na(list(TRT01A = "Overall")) |>
mutate(stat_name = ifelse(variable=="TRT01A" & stat_name=="n" |
variable=="..ard_total_n..", "bigN", stat_name),
variable=ifelse(variable=="SEX", "SEX (F)", variable),
label = ifelse(variable=="SEX (F)", variable, label),
ord1 = as.numeric(factor(variable, levels = c("AGE", "AGEGR1","SEX (F)", "RACE", "ETHNIC","BMI","HEIGHT","WEIGHT"))),
ord2 = as.numeric(factor(label, levels = c("18-64",">64"))))|>
filter(stat_name=="bigN" |
(! variable %in% c("TRT01A","..ard_total_n..") & ! stat_name=="N"))
head(ard_demog)
ard_demog
?ard_dichotomous
library(tfrmt)
library(cards)
library(dplyr)
library(tidyr)
## Load demog ARD
ard_demog <- readRDS("materials/3-Tables/data/tfrmt_ard_demog.rds")
# Manipulations to prep for display
#  - Perform shuffle to consolidate columns
#  - Fill in any overall summaries with TRT01A = "Overall"
#  - Manipulate label for dichotomous SEX so it includes the level and appears on one line
#  - Add columns to order on
#  - keep only treatment group big N's (not variable-level Ns)
ard_demog <- ard_demog |>
shuffle_ard() |>
replace_na(list(TRT01A = "Overall")) |>
mutate(stat_name = ifelse(variable=="TRT01A" & stat_name=="n" |
variable=="..ard_total_n..", "bigN", stat_name),
variable=ifelse(variable=="SEX", "SEX (F)", variable),
label = ifelse(variable=="SEX (F)", variable, label),
ord1 = as.numeric(factor(variable, levels = c("AGE", "AGEGR1","SEX (F)", "RACE", "ETHNIC","BMI","HEIGHT","WEIGHT"))),
ord2 = as.numeric(factor(label, levels = c("18-64",">64"))))|>
filter(stat_name=="bigN" |
(! variable %in% c("TRT01A","..ard_total_n..") & ! stat_name=="N"))
ard_demog
## Load demog ARD
ard_demog <- readRDS("materials/3-Tables/data/tfrmt_ard_demog.rds")
head(ard_demog)
table(ard_demog$group1)
ard_demog |>
shuffle_ard() |>
replace_na(list(TRT01A = "Overall"))
ard_demog %>% names()
ard_demog |>
shuffle_ard() |>
replace_na(list(TRT01A = "Overall"))
